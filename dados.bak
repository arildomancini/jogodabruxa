#lang racket

;; Arquivo para definição dos tipos de dados do programa.
(require 2htdp/image)
(require 2htdp/universe)
(require "constantes.rkt") ;importa as constantes definidas no arquivo "constantes.rkt"

;; Jean Carlos Neto Grr 2016 7741
;; Arildo Mancini Grr 2016 7512
;; Programa jogo mata a bruxa e seus bichos

;;DEFINIÇÕES DE DADOS

(define-struct morcego (x dx y))
;;Morcego é (make-morcego Natural Inteiro)
;;interp. representa a morcego que está numa posição x
;;da tela e anda a uma velocidade dx (dx também indica a direção
;;em que ela está apontando)

;exemplos:
(define MOR-INICIAL (make-morcego (/ LARGURA-CENARIO 2) 10 Y-PADRAO))
(define MOR-MEIO (make-morcego (/ LARGURA-CENARIO 2) 10 Y-PADRAO))
(define MOR-ANTES-VIRAR (make-morcego (+ LIMITE-DIR-MOR 5) 10 Y-PADRAO))
(define MOR-VIRADA (make-morcego LIMITE-DIR-MOR -10 Y-PADRAO))
(define MOR-MEIO-VORTANO (make-morcego (/ LARGURA-CENARIO 2) -10 Y-PADRAO))
(define MOR-CHEGANDO (make-morcego 50 -10 Y-PADRAO))
(define MOR-ULTRAPASSOU (make-morcego (+ LIMITE-DIR-MOR 20) 50 Y-PADRAO))
(define MOR-NO-LIMITE (make-morcego LIMITE-DIR-MOR -50 Y-PADRAO))
;;*************************************************************************************************************************************
                           
(define-struct bruxa (x dx y dy))
;; Bruxa é (make-bruxa Natural Natural Inteiro)
;; interp. representa o bruxa que está numa posição y
;; da tela e anda a uma velocidade dy (dy também indica a direção
;; em que ele está apontando)

;exemplos:
(define BRUXA-INICIAL (make-bruxa X-B 0 LIMITE-CIMA DY-B-DEFAULT))
(define BRUXA-MEIO (make-bruxa X-B 0 (/ ALTURA 2) DY-B-DEFAULT))
(define BRUXA-ANTES-VIRAR (make-bruxa X-B 0 (+ LIMITE-BAIXO 5) DY-B-DEFAULT))
(define BRUXA-VIROU (make-bruxa X-B 0 LIMITE-BAIXO (- DY-B-DEFAULT)))
(define BRUXA-CHEGANDO (make-bruxa X-B 0 (+ LIMITE-CIMA -5) (- DY-B-DEFAULT)))
(define BRUXA-VIROU-L-CIMA (make-bruxa X-B 0 LIMITE-CIMA DY-B-DEFAULT))

#;
(define (fn-para-bruxa b)
  (... (bruxa-y b) (bruxa-dy b))
  )
;;***********************************************************************************************************************************
; ListaDebruxa e ListaDemorcegos é um desses:
;; - empty
;; - (cons bruxa e morcegos ListaDebruxa/ListaDemorcegos)
;; interp. um da listas de bruxas e morcegos
(define LDMM-1 empty)
(define LDMM-2 (cons MOR-INICIAL empty))
(define LDMM-3 (cons MOR-INICIAL (cons MOR-MEIO empty)))
(define LDM-J1 (list MOR-INICIAL MOR-MEIO))
                      
(define LDB1 empty)
(define LDB2 (cons BRUXA-INICIAL  empty))
(define LDB3 (cons BRUXA-INICIAL (cons BRUXA-MEIO empty)))

(define LDB-J1 (list BRUXA-INICIAL
                      (make-bruxa (/ LARGURA-CENARIO 4) 0 (/ ALTURA 2) DY-B-DEFAULT)
                      (make-bruxa (/ LARGURA-CENARIO 4/3) 0 (/ ALTURA 3/2) DY-B-DEFAULT)))
                      
#;
(define (fn-for-ldb ldb)
  (cond [(empty? ldb) (...)]                    ;CASO BASE (CONDIÇÃO DE PARADA)
        [else (... (first ldb)                  ;bruxa
                   (fn-for-ldb (rest ldb)))])) ;RECURSÃO EM CAUDA

;;*****************************************************************************************************************************************************
(define-struct arma (x dx y dy angulo))
;;Vaca é (make-arma Natural Inteiro)
;;interp. representa a arma que está numa posição x
;;da tela e anda a uma velocidade dx (dx também indica a direção
;;em que ela está apontando)

;exemplos:
(define ARMA-INICIAL (make-arma LIMITE-ESQUERDO 10 Y 0 20))
(define ARMA-MEIO (make-arma (/ LARGURA-CENARIO 2) 10 Y 0 0))
(define ARMA-ANTES-VIRAR (make-arma (+ LIMITE-DIREITO 5) 10 Y 0 0))
(define ARMA-PARADA (make-arma (/ LARGURA-CENARIO 2) 0 LIMITE-BAIXO 0 0)) 

#;
(define (fn-para-arma a)
  (... (arma-x a) (arma-dx a)) 
  )
;;****************************************************************************************************************************************
(define-struct tiro (x dx y dy))
;; Tiro é (make-tiro Natural Inteiro Natural)
;; interp. um tiro que apenas na horizontal
(define TIRO-PADRAO (make-tiro 600 30 200 0))
(define LDT1 (list TIRO-PADRAO))

#;
(define (fn-para-tiro t)
  (... (tiro-x t) (tiro-dx t))
  )
;;*****************************************************************************************************************************************
(define-struct jogo (arma bruxas morcegos game-over? tspawn tiros))
;; Jogo é (make-jogoArma ListaDeBruxa e ListaDemorcegos Boolean)
;; interp. representa um jogo que tem uma arma
;; e bruxa e morgegos.

(define JOGO-INICIAL (make-jogo ARMA-INICIAL
                                (list BRUXA-INICIAL)
                                LDM-J1
                                #false
                                1
                                empty))
(define JOGO-MEIO (make-jogo ARMA-ANTES-VIRAR
                                (list BRUXA-MEIO)
                                LDM-J1
                                #false
                                1
                                empty))
(define JOGO-ALVOS (make-jogo
                   (make-arma (- (/ LARGURA-CENARIO 2) MEIO-H-B -5) 10 Y 0 0)
                   (list BRUXA-MEIO)
                   LDM-J1
                   #false
                   1
                   empty))
(define JOGO-ALVOS-MOVEL (make-jogo
                   (make-arma (- (/ LARGURA-CENARIO 2) MEIO-H-B -5) 10 Y 0 0)
                   (list BRUXA-MEIO)
                   LDM-J1
                   #true
                   1
                   empty))
(define JOGO-ACABOU (make-jogo ARMA-MEIO
                               (list BRUXA-MEIO)
                               LDM-J1
                               #true
                               1
                               empty))

(define JOGO-INICIAL-N-ALVOS (make-jogo ARMA-INICIAL
                                LDB-J1
                                LDM-J1
                                #false
                                1
                                empty))

(define JOGO-INICIAL-SPAWNING (make-jogo ARMA-PARADA
                                empty         
                                empty                              
                                #false 
                                0
                                empty))

#;
(define (fn-para-jogo j)
  (... (jogo-arma j)
       (jogo-bruxas j)
       (jogo-game-over? j)))
