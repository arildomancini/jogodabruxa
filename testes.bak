#lang racket

(require rackunit)
(require "constantes.rkt")
(require "dados.rkt")
(require "jogo.rkt")

;; Constantes usadas nos testes
;#
(define (colisao-tiros-bruxas? ldt ldb)
 (test-suite
   "colisao-tiros-bruxas?"
   ...))
;;Exemplo/Teste
(check-equal? (colisao-tiros-bruxas? LDT1 LDB1) #false)
;;***********************************************************************************************************************************
;#
(define (colisao-tiros-morcegos? ldt ldm)
 (test-suite
   "colisao-tiros-morcegos?"
   ...))
;;Exemplo/Teste
(check-equal? (colisao-tiros-morcegos? empty LDM-3) #false)
;;***********************************************************************************************************************************
;#
(define (colisao-tiros-fadas? ldt ldf)
 (test-suite
   "colisao-tiros-fadas?"
   ...))
;;Exemplo/Teste
(check-equal? (colisao-tiros-fadas? empty LDF-3) #false)
;;**********************************************************************************************************************************
;#
(define (proxima-arma a)
  (test-suite
   "proxima-arma"
   ...))
;;Exemplo/Teste
(check-equal? (proxima-arma ARMA-INICIAL) (make-arma 109 10 350 0 20))
;;****************************************************************************************************************************   
;#
(define (proximo-morcego m)
  (test-suite
   "proximo-morcego"
   ...))
; exemplos / testes
;casos em que ele anda pra direita sem chegar no limite 

(check-equal? (proximo-morcego (make-morcego 0 10))
              (make-morcego 10 10)) 
(check-equal? (proximo-morcego ALVO-MOR-MEIO)
              (make-morcego (+ (/ LARGURA-CENARIO 2) 10)
                         10))
; casos em que chega no limite direito e tem que virar
(check-equal? (proximo-morcego ALVO-MOR-ANTES-VIRAR)
              ALVO-MOR-VIRADA)
(check-equal? (proximo-morcego ALVO-MOR-ULTRAPASSOU)
                            ALVO-MOR-NO-LIMITE)
; caso em que ele anda pra esquerda sem chegar no limite 
(check-equal? (proximo-morcego ALVO-MOR-MEIO-VORTANO)
                            (make-morcego (- (/ LARGURA-CENARIO 2) 10)
                                       -10))
;;*******************************************************************************************************************************
;#
(define (proximo-bruxa b)
  (test-suite
   "proximo-bruxa"
   ...))
;;*******************************************************************************************************************************
;#
(define (proximo-fada f)
  (test-suite
   "proximo-fada"
   ...))
; casos em que chega no limite esquerdo e tem que virar

(check-equal? (proximo-morcego (make-morcego -10 -10))
                            (make-morcego 0 10))
(check-equal? (proximo-morcego (make-morcego -20 -50))
                            (make-morcego 0 50))
; exemplos / testes
;casos em que ele anda pra direita sem chegar no limite
(check-expect (proxima-fada (make-fada 0 10 Y-PADRAO))
              (make-fada 10 10 Y-PADRAO)) 
(check-expect (proxima-fada FADA-MEIO)
              (make-fada (+ (/ LARGURA-CENARIO 2) 10)
                         10 Y-PADRAO))
; casos em que chega no limite direito e tem que virar
(check-expect (proxima-fada FADA-ANTES-VIRAR)
              FADA-VIRADA)
(check-expect (proxima-fada FADA-ULTRAPASSOU)
                            FADA-NO-LIMITE)
; caso em que ele anda pra esquerda sem chegar no limite 
(check-expect (proxima-fada FADA-MEIO-VOLTANDO)
                            (make-fada (- (/ LARGURA-CENARIO 2) 10)
                                       -10 Y-PADRAO))

; casos em que chega no limite esquerdo e tem que virar
(check-expect (proxima-fada (make-fada -10 -10 Y-PADRAO))
                            (make-fada 0 10 Y-PADRAO))
(check-expect (proxima-fada (make-fada -20 -50 Y-PADRAO))
                            (make-fada 0 50 Y-PADRAO))

;;**************************************************************************************************************************
;#
(define (proximos-morcegos ldm)
  (test-suite
   "proximos-morcegos"
   ...))
 ;; exemplos / testes
(check-equal? (proximos-morcegos LDMM-3) (list (make-morcego 610 10 200) (make-morcego 610 10 200)))
;;******************************************************************************************************************************
;#
(define (proxima-bruxa b)
  (test-suite
   "proxima-bruxa"
   ...))
 ;; exemplos / testes
(check-equal? (proxima-bruxa BRUXA-INICIAL) (make-bruxa 600 0 55.5 5))
;;******************************************************************************************************************************
(define (proximas-bruxas ldb)
  (test-suite
   "proximas-bruxas"
   ...))
; exemplos / testes
(check-equal? (proximas-bruxas LDB1) empty)
;;*******************************************************************************************************************************
;#
(define (proximo-tiro t)
  (test-suite
   "proximo-tiro"
   ...))
 ;; exemplos / testes
(check-equal? (proximo-tiro (make-tiro 100 30 100 0)) (make-tiro 100 30 80 0)) 
(check-equal? (proximo-tiro (make-tiro 10 30 80 0)) (make-tiro 10 30 60 0))
(check-equal? (proximo-tiro (make-tiro 15 30 50 0)) (make-tiro 15 30 30 0))
(check-equal? (proximo-tiro TIRO-PADRAO) (make-tiro 600 30 180 0))
;;******************************************************************************************************************************
;#
(define (proximos-tiros ldt)
  (test-suite
   "proximos-tiros"
   ...))
 ;; exemplos / testes
(check-equal? (proximos-tiros LDT1) (list (make-tiro 600 30 180 0)))
;;*****************************************************************************************************************************
#;
(define desenha-arma
  (test-suite
   "desenha-arma"
   ...))
 ;;Exemplo/Teste
(check-equal? (desenha-arma "esquerda") IMG-ARMA-ESQ)
(check-equal? (desenha-arma "meio") IMG-ARMA-MEIO)
(check-equal? (desenha-arma "direita") IMG-ARMA-45-DIR)   
;;****************************************************************************************************************************
;#
(define (proximo-jogo j)
  (test-suite
   "proximo-jogo"
   ...))
 ;; exemplos / testes
(check-equal? (proximo-jogo JOGO-INICIAL) (make-jogo (make-arma 109 10 350 0 20)
                                                     (list (make-bruxa 600 0 50 5))
                                                     (list (make-morcego 610 10 200) (make-morcego 610 10 200))
                                                     #false
                                                     2
                                                     empty))
;;*******************************************************************************************************************************
#;
(define (trata-tecla j ke)
  (test-suite
   "trata-tecla"
   ...))
 ;;Exemplo/Teste
 (check-equal? (trata-tecla JOGO-ALVOS-MOVEL "\r")
              JOGO-INICIAL-SPAWNING)
 ;;********************************************************************************************************************************
#;
(define distancia x1 y1 x2 y2
  (test-suite
   "distancia x1 y1 x2 y2"
   ...))
(check-equal? (distancia 3 0 0 4) 5)

#;
(define trata-tecla-arma q ke
  (test-suite
   "trata-tecla-arma q ke"
   ...))
;exemplos
(check-equal? (trata-tecla-arma IMG-ARMA-ESQ " ") "meio")
(check-equal? (trata-tecla-arma ARMA-INICIAL "0") ARMA-INICIAL)
;;**************************************************************************************************************************   

#;
(define trata-mouse-tests
  (test-suite
   "trata-mouse tests"
   ...))

#;
(define terminou?-tests
  (test-suite
   "terminou? tests"
   ...))

;; Adicione os testes restantes



;; ---------------------------------------------------------------------

;; Função que executa um grupo de testes.
(define (executar-testes . testes)
  (run-tests (test-suite "Todos os testes" testes))
  (void))

;; Chama a função para executar os testes.
#;
(executar-testes tock-tests
                 desenha-tests
                 trata-tecla-tests
                 trata-mouse-tests
                 terminou?-tests)
Contact GitHub API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Status Help
